!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
VECTOR	../inc/vector.h	/^}VECTOR;$/;"	t	typeref:struct:_vector
_C_STL_H_	../inc/cstl.h	2;"	d
_ITERATOR_H_	../inc/iterator.h	2;"	d
_VECTOR_H_	../inc/vector.h	2;"	d
__iterator	../inc/iterator.h	/^typedef struct __iterator {$/;"	s
__iterator::begin	../inc/iterator.h	/^    void * (*begin)  ( void*);$/;"	m	struct:__iterator	access:public
__iterator::cur_position	../inc/iterator.h	/^    int cur_position;$/;"	m	struct:__iterator	access:public
__iterator::end	../inc/iterator.h	/^    int    (*end)    ( void*);$/;"	m	struct:__iterator	access:public
__iterator::get_value	../inc/iterator.h	/^    void * (*get_value) ( void * );$/;"	m	struct:__iterator	access:public
__iterator::is_end	../inc/iterator.h	/^    int    (*is_end) ( void*);$/;"	m	struct:__iterator	access:public
__iterator::next	../inc/iterator.h	/^    void   (*next)   ( void*);$/;"	m	struct:__iterator	access:public
__iterator::prev	../inc/iterator.h	/^    void   (*prev)   ( void*);$/;"	m	struct:__iterator	access:public
_destroy	../inc/vector.h	/^    pfnDestruct _destroy;$/;"	m	struct:_vector	access:public
_vector	../inc/vector.h	/^typedef struct _vector {$/;"	s
_vector::_destroy	../inc/vector.h	/^    pfnDestruct _destroy;$/;"	m	struct:_vector	access:public
_vector::back	../inc/vector.h	/^    void * (*back       ) ( struct _vector *);$/;"	m	struct:_vector	access:public
_vector::capacity	../inc/vector.h	/^    int    capacity ;$/;"	m	struct:_vector	access:public
_vector::cur_size	../inc/vector.h	/^    int    cur_size ;$/;"	m	struct:_vector	access:public
_vector::elem	../inc/vector.h	/^    void **elem     ;$/;"	m	struct:_vector	access:public
_vector::element_at	../inc/vector.h	/^    void * (*element_at ) ( struct _vector *, int   );$/;"	m	struct:_vector	access:public
_vector::empty	../inc/vector.h	/^    int    (*empty      ) ( struct _vector * );$/;"	m	struct:_vector	access:public
_vector::f_iterator	../inc/vector.h	/^    iterator *f_iterator;$/;"	m	struct:_vector	access:public
_vector::front	../inc/vector.h	/^    void * (*front      ) ( struct _vector *);$/;"	m	struct:_vector	access:public
_vector::get_f_iterator	../inc/vector.h	/^    iterator *(*get_f_iterator) ( struct _vector *);$/;"	m	struct:_vector	access:public
_vector::push_back	../inc/vector.h	/^    void   (*push_back  ) ( struct _vector *, void *);$/;"	m	struct:_vector	access:public
_vector::reserve	../inc/vector.h	/^    void   (*reserve    ) ( struct _vector *,int );$/;"	m	struct:_vector	access:public
_vector::size	../inc/vector.h	/^    int    (*size       ) ( struct _vector * );$/;"	m	struct:_vector	access:public
back	../inc/vector.h	/^    void * (*back       ) ( struct _vector *);$/;"	m	struct:_vector	access:public
begin	../inc/iterator.h	/^    void * (*begin)  ( void*);$/;"	m	struct:__iterator	access:public
capacity	../inc/vector.h	/^    int    capacity ;$/;"	m	struct:_vector	access:public
cur_position	../inc/iterator.h	/^    int cur_position;$/;"	m	struct:__iterator	access:public
cur_size	../inc/vector.h	/^    int    cur_size ;$/;"	m	struct:_vector	access:public
elem	../inc/vector.h	/^    void **elem     ;$/;"	m	struct:_vector	access:public
element_at	../inc/vector.h	/^    void * (*element_at ) ( struct _vector *, int   );$/;"	m	struct:_vector	access:public
empty	../inc/vector.h	/^    int    (*empty      ) ( struct _vector * );$/;"	m	struct:_vector	access:public
end	../inc/iterator.h	/^    int    (*end)    ( void*);$/;"	m	struct:__iterator	access:public
f_iterator	../inc/vector.h	/^    iterator *f_iterator;$/;"	m	struct:_vector	access:public
free_elem	teststl.c	/^void free_elem ( void *in ) {$/;"	f	signature:( void *in )
front	../inc/vector.h	/^    void * (*front      ) ( struct _vector *);$/;"	m	struct:_vector	access:public
get_f_iterator	../inc/vector.h	/^    iterator *(*get_f_iterator) ( struct _vector *);$/;"	m	struct:_vector	access:public
get_value	../inc/iterator.h	/^    void * (*get_value) ( void * );$/;"	m	struct:__iterator	access:public
is_end	../inc/iterator.h	/^    int    (*is_end) ( void*);$/;"	m	struct:__iterator	access:public
iterator	../inc/iterator.h	/^}iterator;$/;"	t	typeref:struct:__iterator
main	teststl.c	/^main ( int argc, char ** argv )  {$/;"	f	signature:( int argc, char ** argv )
next	../inc/iterator.h	/^    void   (*next)   ( void*);$/;"	m	struct:__iterator	access:public
pfnDestruct	../inc/vector.h	/^typedef void (*pfnDestruct) ( void *);$/;"	t
prev	../inc/iterator.h	/^    void   (*prev)   ( void*);$/;"	m	struct:__iterator	access:public
push_back	../inc/vector.h	/^    void   (*push_back  ) ( struct _vector *, void *);$/;"	m	struct:_vector	access:public
reserve	../inc/vector.h	/^    void   (*reserve    ) ( struct _vector *,int );$/;"	m	struct:_vector	access:public
size	../inc/vector.h	/^    int    (*size       ) ( struct _vector * );$/;"	m	struct:_vector	access:public
test_vector	teststl.c	/^void test_vector(){$/;"	f
vector_back	../inc/vector.h	/^void     * vector_back           ( VECTOR *        );$/;"	p	signature:( VECTOR * )
vector_back	../src/vector.c	/^vector_back ( VECTOR *vec) {$/;"	f	signature:( VECTOR *vec)
vector_begin	../inc/vector.h	/^void     * vector_begin          ( void *          ); $/;"	p	signature:( void * )
vector_begin	../src/vector.c	/^vector_begin( void *v ) {$/;"	f	signature:( void *v )
vector_destroy	../inc/vector.h	/^void       vector_destroy        ( VECTOR *        );$/;"	p	signature:( VECTOR * )
vector_destroy	../src/vector.c	/^void vector_destroy ( VECTOR *vec ) {$/;"	f	signature:( VECTOR *vec )
vector_element_at	../inc/vector.h	/^void     * vector_element_at     ( VECTOR *, int   );$/;"	p	signature:( VECTOR *, int )
vector_element_at	../src/vector.c	/^vector_element_at( VECTOR *vec, int pos){$/;"	f	signature:( VECTOR *vec, int pos)
vector_empty	../inc/vector.h	/^int        vector_empty          ( VECTOR *        );$/;"	p	signature:( VECTOR * )
vector_empty	../src/vector.c	/^vector_empty ( VECTOR *vec) {$/;"	f	signature:( VECTOR *vec)
vector_end	../inc/vector.h	/^void     * vector_end            ( void *          ); $/;"	p	signature:( void * )
vector_end	../src/vector.c	/^vector_end( void *v ) {$/;"	f	signature:( void *v )
vector_f_iterator	../inc/vector.h	/^iterator * vector_f_iterator     ( VECTOR *        );$/;"	p	signature:( VECTOR * )
vector_f_iterator	../src/vector.c	/^vector_f_iterator ( VECTOR *vec ) {$/;"	f	signature:( VECTOR *vec )
vector_front	../inc/vector.h	/^void     * vector_front          ( VECTOR *        );$/;"	p	signature:( VECTOR * )
vector_front	../src/vector.c	/^vector_front( VECTOR *vec) {$/;"	f	signature:( VECTOR *vec)
vector_get_f_iterator	../inc/vector.h	/^iterator * vector_get_f_iterator ( VECTOR *        );$/;"	p	signature:( VECTOR * )
vector_get_value	../inc/vector.h	/^void     * vector_get_value      ( void *          );$/;"	p	signature:( void * )
vector_get_value	../src/vector.c	/^vector_get_value ( void *v ) {$/;"	f	signature:( void *v )
vector_is_end	../inc/vector.h	/^int        vector_is_end         ( void *          );$/;"	p	signature:( void * )
vector_is_end	../src/vector.c	/^vector_is_end( void *v ) {$/;"	f	signature:( void *v )
vector_new	../inc/vector.h	/^VECTOR   * vector_new            ( int, pfnDestruct); $/;"	p	signature:( int, pfnDestruct)
vector_new	../src/vector.c	/^vector_new(int s, pfnDestruct fn) {$/;"	f	signature:(int s, pfnDestruct fn)
vector_next	../inc/vector.h	/^void       vector_next           ( void *          );$/;"	p	signature:( void * )
vector_next	../src/vector.c	/^vector_next( void *v ) {$/;"	f	signature:( void *v )
vector_prev	../inc/vector.h	/^void       vector_prev           ( void *          ); $/;"	p	signature:( void * )
vector_prev	../src/vector.c	/^vector_prev( void *v ) {$/;"	f	signature:( void *v )
vector_push_back	../inc/vector.h	/^void       vector_push_back      ( VECTOR *, void *);$/;"	p	signature:( VECTOR *, void *)
vector_push_back	../src/vector.c	/^vector_push_back( VECTOR *vec, void *elem) {$/;"	f	signature:( VECTOR *vec, void *elem)
vector_reserve	../inc/vector.h	/^void       vector_reserve        ( VECTOR *, int   );$/;"	p	signature:( VECTOR *, int )
vector_reserve	../src/vector.c	/^vector_reserve ( VECTOR *vec, int new_size) {$/;"	f	signature:( VECTOR *vec, int new_size)
vector_size	../inc/vector.h	/^int        vector_size           ( VECTOR *        );$/;"	p	signature:( VECTOR * )
vector_size	../src/vector.c	/^vector_size( VECTOR *vec ) {$/;"	f	signature:( VECTOR *vec )
