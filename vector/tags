!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	Makefile	/^CC              :=  gcc -g$/;"	m
CCFLAGS	Makefile	/^CCFLAGS         :=  -Wall -g $/;"	m
P_C_OBJS	Makefile	/^P_C_OBJS        :=  ${P_C_SRCS:.c=.o}$/;"	m
P_C_SRCS	Makefile	/^P_C_SRCS        :=  $(wildcard *.c)$/;"	m
P_NAME	Makefile	/^P_NAME          :=  tvector$/;"	m
VECTOR_SIZE	testst.c	6;"	d	file:
_VECTOR_H_	vector.h	2;"	d
__vector	vector.h	/^typedef struct __vector {$/;"	s
__vector::capacity	vector.h	/^    int    capacity ; \/* Current capacity *\/$/;"	m	struct:__vector	access:public
__vector::cur_size	vector.h	/^    int    cur_size ; \/* number of elements in the vector *\/$/;"	m	struct:__vector	access:public
__vector::elem	vector.h	/^    void **elem     ; \/* opeque pointer array *\/$/;"	m	struct:__vector	access:public
capacity	vector.h	/^    int    capacity ; \/* Current capacity *\/$/;"	m	struct:__vector	access:public
cur_size	vector.h	/^    int    cur_size ; \/* number of elements in the vector *\/$/;"	m	struct:__vector	access:public
elem	vector.h	/^    void **elem     ; \/* opeque pointer array *\/$/;"	m	struct:__vector	access:public
free_elem	testst.c	/^void free_elem ( void *in ) {$/;"	f	signature:( void *in )
main	testst.c	/^main ( int argc, char ** argv )  {$/;"	f	signature:( int argc, char ** argv )
pfnDestruct	vector.h	/^typedef void (*pfnDestruct) ( void *);$/;"	t
t_vector_capacity	testst.c	/^t_vector_capacity(vector *pVec){$/;"	f	signature:(vector *pVec)
t_vector_empty	testst.c	/^t_vector_empty(vector *pVec){$/;"	f	signature:(vector *pVec)
t_vector_insert	testst.c	/^t_vector_insert(vector *pVec){$/;"	f	signature:(vector *pVec)
t_vector_push_back	testst.c	/^t_vector_push_back( vector *pVec ) {$/;"	f	signature:( vector *pVec )
t_vector_size	testst.c	/^t_vector_size(vector *pVec) {$/;"	f	signature:(vector *pVec)
test_vector	testst.c	/^void test_vector(){$/;"	f
vector	vector.h	/^}vector;$/;"	t	typeref:struct:__vector
vector_back	vector.c	/^vector_back( vector *vec){$/;"	f	signature:( vector *vec)
vector_back	vector.h	/^vector_back( vector *);$/;"	p	signature:( vector *)
vector_capacity	vector.c	/^vector_capacity( vector *vec ) {$/;"	f	signature:( vector *vec )
vector_capacity	vector.h	/^vector_capacity( vector *);$/;"	p	signature:( vector *)
vector_element_at	vector.c	/^vector_element_at ( vector *vec, int pos ) {$/;"	f	signature:( vector *vec, int pos )
vector_element_at	vector.h	/^vector_element_at ( vector *, int );$/;"	p	signature:( vector *, int )
vector_empty	vector.c	/^vector_empty( vector *vec ) {$/;"	f	signature:( vector *vec )
vector_empty	vector.h	/^vector_empty( vector *);$/;"	p	signature:( vector *)
vector_front	vector.c	/^vector_front( vector *vec){$/;"	f	signature:( vector *vec)
vector_front	vector.h	/^vector_front( vector *);$/;"	p	signature:( vector *)
vector_insert	vector.c	/^vector_insert( vector *vec,int pos,void** elem) {$/;"	f	signature:( vector *vec,int pos,void** elem)
vector_insert	vector.h	/^vector_insert( vector *,int,void**);$/;"	p	signature:( vector *,int,void**)
vector_new	vector.c	/^vector_new(int s, pfnDestruct fn) {$/;"	f	signature:(int s, pfnDestruct fn)
vector_new	vector.h	/^vector_new ( int, pfnDestruct); $/;"	p	signature:( int, pfnDestruct)
vector_push_back	vector.c	/^vector_push_back ( vector *vec, void *elem) {$/;"	f	signature:( vector *vec, void *elem)
vector_push_back	vector.h	/^vector_push_back ( vector *, void *);$/;"	p	signature:( vector *, void *)
vector_size	vector.c	/^vector_size( vector *vec) {$/;"	f	signature:( vector *vec)
vector_size	vector.h	/^vector_size( vector *);$/;"	p	signature:( vector *)
