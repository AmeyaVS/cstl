!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
CC	Makefile	/^CC              :=  gcc -g$/;"	m
CXX	Makefile	/^CXX             :=  gcc$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS        :=  -Wall -g$/;"	m
P_CXX_OBJS	Makefile	/^P_CXX_OBJS      :=  ${P_CXX_SRCS:.cpp=.o}$/;"	m
P_CXX_SRCS	Makefile	/^P_CXX_SRCS      :=  $(wildcard *.cpp)$/;"	m
P_C_OBJS	Makefile	/^P_C_OBJS        :=  ${P_C_SRCS:.c=.o}$/;"	m
P_C_SRCS	Makefile	/^P_C_SRCS        :=  $(wildcard *.c)$/;"	m
P_NAME	Makefile	/^P_NAME          :=  teststl$/;"	m
P_OBJS	Makefile	/^P_OBJS          :=  $(P_C_OBJS) $(P_CXX_OBJS)$/;"	m
VECTOR	vector.h	/^}VECTOR;$/;"	t	typeref:struct:_vector
_C_STL_H_	cstl.h	2;"	d
_DEQUE_H_	deque.h	2;"	d
_GRAPH_H_	graph.h	2;"	d
_ITERATOR_H_	iterator.h	2;"	d
_LIST_H_	list.h	2;"	d
_MULTI_SET_H_	multiset.h	2;"	d
_SET_H_	set.h	2;"	d
_TREE_H_	tree.h	2;"	d
_VECTOR_H_	vector.h	2;"	d
__iterator	iterator.h	/^typedef struct __iterator {$/;"	s
__iterator::begin	iterator.h	/^    void * (*begin)  ( void*);$/;"	m	struct:__iterator	access:public
__iterator::cur_position	iterator.h	/^    int cur_position;$/;"	m	struct:__iterator	access:public
__iterator::end	iterator.h	/^    int    (*end)    ( void*);$/;"	m	struct:__iterator	access:public
__iterator::get_value	iterator.h	/^    void * (*get_value) ( void * );$/;"	m	struct:__iterator	access:public
__iterator::is_end	iterator.h	/^    int    (*is_end) ( void*);$/;"	m	struct:__iterator	access:public
__iterator::next	iterator.h	/^    void   (*next)   ( void*);$/;"	m	struct:__iterator	access:public
__iterator::prev	iterator.h	/^    void   (*prev)   ( void*);$/;"	m	struct:__iterator	access:public
_destroy	vector.h	/^    pfnDestruct _destroy;$/;"	m	struct:_vector	access:public
_vector	vector.h	/^typedef struct _vector {$/;"	s
_vector::_destroy	vector.h	/^    pfnDestruct _destroy;$/;"	m	struct:_vector	access:public
_vector::back	vector.h	/^    void * (*back       ) ( struct _vector *);$/;"	m	struct:_vector	access:public
_vector::capacity	vector.h	/^    int    capacity ;$/;"	m	struct:_vector	access:public
_vector::cur_size	vector.h	/^    int    cur_size ;$/;"	m	struct:_vector	access:public
_vector::elem	vector.h	/^    void **elem     ;$/;"	m	struct:_vector	access:public
_vector::element_at	vector.h	/^    void * (*element_at ) ( struct _vector *, int   );$/;"	m	struct:_vector	access:public
_vector::empty	vector.h	/^    int    (*empty      ) ( struct _vector * );$/;"	m	struct:_vector	access:public
_vector::f_iterator	vector.h	/^    iterator *f_iterator;$/;"	m	struct:_vector	access:public
_vector::front	vector.h	/^    void * (*front      ) ( struct _vector *);$/;"	m	struct:_vector	access:public
_vector::get_f_iterator	vector.h	/^    iterator *(*get_f_iterator) ( struct _vector *);$/;"	m	struct:_vector	access:public
_vector::push_back	vector.h	/^    void   (*push_back  ) ( struct _vector *, void *);$/;"	m	struct:_vector	access:public
_vector::reserve	vector.h	/^    void   (*reserve    ) ( struct _vector *,int );$/;"	m	struct:_vector	access:public
_vector::size	vector.h	/^    int    (*size       ) ( struct _vector * );$/;"	m	struct:_vector	access:public
back	vector.h	/^    void * (*back       ) ( struct _vector *);$/;"	m	struct:_vector	access:public
begin	iterator.h	/^    void * (*begin)  ( void*);$/;"	m	struct:__iterator	access:public
capacity	vector.h	/^    int    capacity ;$/;"	m	struct:_vector	access:public
cur_position	iterator.h	/^    int cur_position;$/;"	m	struct:__iterator	access:public
cur_size	vector.h	/^    int    cur_size ;$/;"	m	struct:_vector	access:public
elem	vector.h	/^    void **elem     ;$/;"	m	struct:_vector	access:public
element_at	vector.h	/^    void * (*element_at ) ( struct _vector *, int   );$/;"	m	struct:_vector	access:public
empty	vector.h	/^    int    (*empty      ) ( struct _vector * );$/;"	m	struct:_vector	access:public
end	iterator.h	/^    int    (*end)    ( void*);$/;"	m	struct:__iterator	access:public
f_iterator	vector.h	/^    iterator *f_iterator;$/;"	m	struct:_vector	access:public
free_elem	testst.c	/^void free_elem ( void *in ) {$/;"	f	signature:( void *in )
front	vector.h	/^    void * (*front      ) ( struct _vector *);$/;"	m	struct:_vector	access:public
get_f_iterator	vector.h	/^    iterator *(*get_f_iterator) ( struct _vector *);$/;"	m	struct:_vector	access:public
get_value	iterator.h	/^    void * (*get_value) ( void * );$/;"	m	struct:__iterator	access:public
is_end	iterator.h	/^    int    (*is_end) ( void*);$/;"	m	struct:__iterator	access:public
iterator	iterator.h	/^}iterator;$/;"	t	typeref:struct:__iterator
main	testst.c	/^main ( int argc, char ** argv )  {$/;"	f	signature:( int argc, char ** argv )
next	iterator.h	/^    void   (*next)   ( void*);$/;"	m	struct:__iterator	access:public
pfnDestruct	vector.h	/^typedef void (*pfnDestruct) ( void *);$/;"	t
prev	iterator.h	/^    void   (*prev)   ( void*);$/;"	m	struct:__iterator	access:public
push_back	vector.h	/^    void   (*push_back  ) ( struct _vector *, void *);$/;"	m	struct:_vector	access:public
reserve	vector.h	/^    void   (*reserve    ) ( struct _vector *,int );$/;"	m	struct:_vector	access:public
size	vector.h	/^    int    (*size       ) ( struct _vector * );$/;"	m	struct:_vector	access:public
test_vector	testst.c	/^void test_vector(){$/;"	f
vector_back	vector.c	/^vector_back ( VECTOR *vec) {$/;"	f	signature:( VECTOR *vec)
vector_back	vector.h	/^void     * vector_back           ( VECTOR *        );$/;"	p	signature:( VECTOR * )
vector_begin	vector.c	/^vector_begin( void *v ) {$/;"	f	signature:( void *v )
vector_begin	vector.h	/^void     * vector_begin          ( void *          ); $/;"	p	signature:( void * )
vector_destroy	vector.c	/^void vector_destroy ( VECTOR *vec ) {$/;"	f	signature:( VECTOR *vec )
vector_destroy	vector.h	/^void       vector_destroy        ( VECTOR *        );$/;"	p	signature:( VECTOR * )
vector_element_at	vector.c	/^vector_element_at( VECTOR *vec, int pos){$/;"	f	signature:( VECTOR *vec, int pos)
vector_element_at	vector.h	/^void     * vector_element_at     ( VECTOR *, int   );$/;"	p	signature:( VECTOR *, int )
vector_empty	vector.c	/^vector_empty ( VECTOR *vec) {$/;"	f	signature:( VECTOR *vec)
vector_empty	vector.h	/^int        vector_empty          ( VECTOR *        );$/;"	p	signature:( VECTOR * )
vector_end	vector.c	/^vector_end( void *v ) {$/;"	f	signature:( void *v )
vector_end	vector.h	/^void     * vector_end            ( void *          ); $/;"	p	signature:( void * )
vector_f_iterator	vector.c	/^vector_f_iterator ( VECTOR *vec ) {$/;"	f	signature:( VECTOR *vec )
vector_f_iterator	vector.h	/^iterator * vector_f_iterator     ( VECTOR *        );$/;"	p	signature:( VECTOR * )
vector_front	vector.c	/^vector_front( VECTOR *vec) {$/;"	f	signature:( VECTOR *vec)
vector_front	vector.h	/^void     * vector_front          ( VECTOR *        );$/;"	p	signature:( VECTOR * )
vector_get_f_iterator	vector.h	/^iterator * vector_get_f_iterator ( VECTOR *        );$/;"	p	signature:( VECTOR * )
vector_get_value	vector.c	/^vector_get_value ( void *v ) {$/;"	f	signature:( void *v )
vector_get_value	vector.h	/^void     * vector_get_value      ( void *          );$/;"	p	signature:( void * )
vector_is_end	vector.c	/^vector_is_end( void *v ) {$/;"	f	signature:( void *v )
vector_is_end	vector.h	/^int        vector_is_end         ( void *          );$/;"	p	signature:( void * )
vector_new	vector.c	/^vector_new(int s, pfnDestruct fn) {$/;"	f	signature:(int s, pfnDestruct fn)
vector_new	vector.h	/^VECTOR   * vector_new            ( int, pfnDestruct); $/;"	p	signature:( int, pfnDestruct)
vector_next	vector.c	/^vector_next( void *v ) {$/;"	f	signature:( void *v )
vector_next	vector.h	/^void       vector_next           ( void *          );$/;"	p	signature:( void * )
vector_prev	vector.c	/^vector_prev( void *v ) {$/;"	f	signature:( void *v )
vector_prev	vector.h	/^void       vector_prev           ( void *          ); $/;"	p	signature:( void * )
vector_push_back	vector.c	/^vector_push_back( VECTOR *vec, void *elem) {$/;"	f	signature:( VECTOR *vec, void *elem)
vector_push_back	vector.h	/^void       vector_push_back      ( VECTOR *, void *);$/;"	p	signature:( VECTOR *, void *)
vector_reserve	vector.c	/^vector_reserve ( VECTOR *vec, int new_size) {$/;"	f	signature:( VECTOR *vec, int new_size)
vector_reserve	vector.h	/^void       vector_reserve        ( VECTOR *, int   );$/;"	p	signature:( VECTOR *, int )
vector_size	vector.c	/^vector_size( VECTOR *vec ) {$/;"	f	signature:( VECTOR *vec )
vector_size	vector.h	/^int        vector_size           ( VECTOR *        );$/;"	p	signature:( VECTOR * )
